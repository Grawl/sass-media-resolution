//
	Media Queries feature: Resolution
	Sass mixins library
//
	@mixin: +resolution($prefix, $dppx)
	A base mixin to rule them all. `print` is included because of carrying for the enemy.
	@param: $prefix
	Type: string
	Possible values: `min` and `max` to print `min`/`max``-``resolution`
	@param: $dppx
	Type: positive (i hope) integer
	Possible values: `1`, `1.2`, `2`, `10`
=resolution($prefix, $dppx)
	// 1px = 96dpi
	$dpi: $dppx*96
	@media (#{$prefix}-resolution: #{$dppx}dppx)
		@content
//
	@mixin: +min-resolution($dppx)
	Polyfill to `@media (min-resolution)`
	@param: $dppx
	The same from `+resolution` mixin. Wrap your styles with this like you do it with a regular `@media` rule.
=min-resolution($dppx)
	+resolution(min, $dppx)
		@content
//
	@mixin: +max-resolution($dppx)
	Polyfill to `@media (max-resolution)`
	@param: $dppx
	The same from `+resolution` mixin. Wrap your styles with this like you do it with a regular `@media` rule.
=max-resolution($dppx)
	+resolution(max, $dppx)
		@content
//
	@variable: $resolution-<xx?>dpi
	Densities of screen following to [Android specification](http://developer.android.com/guide/practices/screens_support.html#range). Extend this if you want to. I got here only densities from @1x to @2x.
$resolution-mdpi: 1
$resolution-hdpi: 1.5
$resolution-xhdpi: 2.0
//
	@mixin: +screen-mdpi
	Wrap your style in this mixin to limit them on normal-dpi (@1x) screens
=screen-mdpi
	+min-resolution($resolution-mdpi)
		@content
//
	@mixin: +screen-mdpi
	Wrap your style in this mixin to limit them on high-dpi (@1.5x) screens
=screen-hdpi
	+min-resolution($resolution-hdpi)
		@content
//
	@mixin: +screen-mdpi
	Wrap your style in this mixin to limit them on extra-high-dpi (@2x) screens
=screen-xhdpi
	+min-resolution($resolution-xhdpi)
		@content
